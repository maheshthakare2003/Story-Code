import java.util.*;

public class Main {
    public static void main(String[] args) {

        // 1. Restaurant initial setup
        Chef chef1 = new Chef("Mario","Head Chef","C1", new Date());
        Employee emp1 = new Employee("John","Waiter","W1", new Date());

        ArrayList<Employee> staffList = new ArrayList<>();
        staffList.add(chef1);
        staffList.add(emp1);

        // food items
        FoodITEM f1 = new FoodITEM("Sandwich","Snacks");
        FoodITEM f2 = new FoodITEM("Pasta","Lunch");
        ArrayList<FoodITEM> foodList = new ArrayList<>();
        foodList.add(f1);
        foodList.add(f2);

        Menu menu1 = new Menu(new FoodLIST(foodList),"Lunch","Active");
        Restaurant cafe1 = new Restaurant("CafeCafe","Mumbai","Cafe","Open", staffList, menu1,new ArrayList<>());

        System.out.println("\n--- Restaurant setup done ---");
        cafe1.showMenu();

        // 2. bad feedback
        cafe1.recordFeedback(chef1,2,"cust1");
        cafe1.recordFeedback(emp1,1,"cust2");

        System.out.println("\nFeedbacks:");
        cafe1.listEmpFeedback();

        // 3. AI startup analysis
        AiStartup startup1 = new AiStartup(101,"PixieCollab AI");
        System.out.println("\nAI startup analyzing reviews...");
        System.out.println("=> Suggestion: improve ingredients to improve ratings");

        // 4. Try Amazon for items
        Amazon amazon = new Amazon();
        System.out.println("\nTrying Amazon shopping...");
        amazon.shop(0,0,3);   // umbrella
        amazon.shop(1,1,1);   // bottle
        System.out.println("But tomatoes & milk not found!");

        // 5. Farmer supply
        Milk milk1 = new Milk(50);
        Cow cow1 = new Cow("Cow",milk1);

        Harvest hTomato = new Harvest(200);
        VegetableCrop tomato = new VegetableCrop("Tomatoes",hTomato);

        Harvest hMango = new Harvest(300);
        FruitCrop mango = new FruitCrop("Mangoes",hMango);

        Farmer farmer1 = new Farmer("Aravinth", new Farm("Village Farm",tomato), cow1);

        System.out.println("\nFarmer supplies fresh items:");
        farmer1.showFarmer();
        cow1.showCow();
        mango.showFruitCrop();

        // 6. transport via Aircraft
        PassengerAircraft plane = new PassengerAircraft();
        plane.refuel(new Fuel(2500));
        System.out.println("\nLoading farm goods + cow on aircraft...");
        TicketCounter tc = new TicketCounter();
        Ticket t1 = tc.issueTicket("Farm Produce + Cow", plane.des);
        t1.showTicket();

        // 7. new menu created
        ArrayList<FoodITEM> newMenuList = new ArrayList<>();
        newMenuList.add(new FoodITEM("Special Sandwich 2.0","Snacks"));
        newMenuList.add(new FoodITEM("Pasta Deluxe","Lunch"));
        cafe1.menu = new Menu(new FoodLIST(newMenuList),"Lunch","Active");

        System.out.println("\n--- Updated Menu ---");
        cafe1.showMenu();

        // 8. happy feedbacks
        cafe1.recordFeedback(chef1,5,"happyCustomer");
        cafe1.recordFeedback(emp1,5,"regularCustomer");

        System.out.println("\nFeedback after improvements:");
        cafe1.listEmpFeedback();
        System.out.println("\nCafeCafe became famous!!");
    }
}

// ================= Restaurant =================
class Restaurant {
    String name;
    String location;
    String type;
    String status;
    List<Employee> employees;
    Menu menu;
    List<Feedback> feedbacks;

    Restaurant(String n,String loc,String t,String s,List<Employee> e,Menu m,List<Feedback> fb){
        name=n; location=loc; type=t; status=s; employees=e; menu=m; feedbacks=fb;
    }

    void showMenu(){
        System.out.println("Menu:");
        for(FoodITEM f: menu.fooditems.foodList){
            System.out.println(" - "+f.name+" ("+f.type+")");
        }
    }

    void recordFeedback(Employee emp,int rating,String cust){
        feedbacks.add(new Feedback(cust,emp,rating));
    }

    void listEmpFeedback(){
        for(Feedback fb: feedbacks){
            System.out.println("Employee: "+fb.employee.name+" Rating:"+fb.rating+" by "+fb.customer);
        }
    }
}

class Menu {
    FoodLIST fooditems;
    String type;
    String status;
    Menu(FoodLIST f,String t,String s){
        fooditems=f; type=t; status=s;
    }
}

class Employee {
    String name,designation,empID;
    Date joiningDate;
    Employee(String n,String d,String id,Date jd){
        name=n; designation=d; empID=id; joiningDate=jd;
    }
}

class Chef extends Employee {
    Chef(String n,String d,String id,Date jd){
        super(n,d,id,jd);
    }
}

class Feedback {
    String customer;
    Employee employee;
    int rating;
    Feedback(String c,Employee e,int r){
        customer=c; employee=e; rating=r;
    }
}

class FoodITEM {
    String name,type;
    FoodITEM(String n,String t){ name=n; type=t; }
}

class FoodLIST {
    List<FoodITEM> foodList;
    FoodLIST(List<FoodITEM> f){ foodList=f; }
}

// ================= Farmer =================
class Farmer {
    String name;
    Farm f;
    Animal a;
    Farmer(String n,Farm f1,Animal a1){ name=n; f=f1; a=a1; }
    void showFarmer(){
        System.out.println("Farmer: "+name);
        f.showFarm();
        a.showAnimal();
    }
}

class Farm {
    String location;
    Crop c;
    Farm(String loc,Crop c1){ location=loc; c=c1; }
    void showFarm(){
        System.out.println("Farm at "+location);
        c.showCrop();
    }
}

class Crop {
    String cropName;
    Harvest h;
    Crop(String n,Harvest h1){ cropName=n; h=h1; }
    void showCrop(){ System.out.println("Crop: "+cropName+" harvest "+h.showHarvest()); }
}

class VegetableCrop extends Crop {
    VegetableCrop(String n,Harvest h1){ super(n,h1); }
    void showVegetableCrop(){ System.out.println("Veg crop: "+cropName); }
}

class FruitCrop extends Crop {
    FruitCrop(String n,Harvest h1){ super(n,h1); }
    void showFruitCrop(){ System.out.println("Fruit crop: "+cropName); }
}

class Animal {
    String animalType;
    Animal(String t){ animalType=t; }
    void showAnimal(){ System.out.println("Animal: "+animalType); }
}

class Cow extends Animal {
    Milk m;
    Cow(String t,Milk m1){ super(t); m=m1; }
    void showCow(){ System.out.println(m.showMilk()); }
}

class Milk {
    int quantity;
    Milk(int q){ quantity=q; }
    String showMilk(){ return "Milk Produced: "+quantity+" L"; }
}

class Harvest {
    int quantity;
    Harvest(int q){ quantity=q; }
    String showHarvest(){ return quantity+" kg"; }   // âœ… fixed
}


// ================= Aircraft =================
class PassengerAircraft {
    Pilot p=new Pilot("Muskan",120);
    Destination des=new Destination("Mumbai");
    Arrival arr=new Arrival("Village Farm");
    Fuel fuel;
    void refuel(Fuel f){
        fuel=f;
        System.out.println("Aircraft refueled with "+f.total+" litres");
    }
}

class Pilot {
    String name; int hours;
    Pilot(String n,int h){ name=n; hours=h; }
}

class Destination {
    String d;
    Destination(String d1){ d=d1; }
}

class Arrival {
    String a;
    Arrival(String a1){ a=a1; }
}

class Fuel {
    float total;
    Fuel(float t){ total=t; }
}

class Ticket {
    String name; Destination destination;
    Ticket(String n,Destination d){ name=n; destination=d; }
    void showTicket(){ System.out.println("Ticket issued to "+name+" for "+destination.d); }
}

class TicketCounter {
    Ticket issueTicket(String n,Destination d){ return new Ticket(n,d); }
}

// ================= Amazon =================
class ProductEcom {
    String type; int availableQuantity; int price;
    ProductEcom(String t,int aq,int p){ type=t; availableQuantity=aq; price=p; }
    void addToCart(int q,RegisteredUser u){
        if(availableQuantity<q) System.out.println("Out of stock");
        else {
            availableQuantity-=q;
            System.out.println(u.email+" added "+type+" to cart");
            System.out.println("Proceed to checkout");
        }
    }
}

class Amazon {
    ProductEcom products[]={ new ProductEcom("umbrella",20,400), new ProductEcom("bottle",80,240) };
    PaymentGateway upi=new PaymentGateway("upi");
    RegisteredUser users[]={ new RegisteredUser("john@gmail.com","john@123"), new RegisteredUser("jane@gmail.com","jane@123") };
    void shop(int u,int p,int q){
        products[p].addToCart(q,users[u]);
        int cost=upi.payment(products[p],q);
    }
}

class RegisteredUser {
    String email,password;
    Delivery address=new Delivery("home","123 Road, Mumbai");
    RegisteredUser(String e,String p){ email=e; password=p; System.out.println("User registered"); }
}

class Delivery {
    String type,address;
    Delivery(String t,String a){ type=t; address=a; }
}

class PaymentGateway {
    String type;
    PaymentGateway(String t){ type=t; }
    int payment(ProductEcom p,int q){
        int total=p.price*q;
        System.out.println("Payment of "+total+" done using "+type);
        return total;
    }
}

// ================= AI Startup =================
class Enterprise {
    int enterpriseId; String enterpriseName;
    Enterprise(int id,String name){ enterpriseId=id; enterpriseName=name; }
}

class AiStartup extends Enterprise {
    double revenue=0.0;
    AiStartup(int id,String name){ super(id,name); }
    void genRevenue(ProductAI p,double earned){
        revenue+=earned;
        System.out.println("Revenue: "+earned+" Total:"+revenue);
    }
}

class ProductAI {
    String category,status;
    ProductAI(String c,String s){ category=c; status=s; }
}
